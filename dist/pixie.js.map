{"version":3,"sources":["../src/pixie.js"],"names":["source","open","close","first","last","openLength","length","closeLength","fragments","expressions","i","indexOf","slice","template","data","result"],"mappings":"gMACA,SAAgBA,EAAQC,EAAMC,GAO5B,IANA,IAIIC,EACAC,EALAC,EAAaJ,EAAKK,OAClBC,EAAcL,EAAMI,OACpBE,EAAY,GACZC,EAAc,GAGTC,EAAI,GAA2C,GAAvCP,EAAQH,EAAOW,QAAQV,EAAMG,KAC5CI,EAAUE,GAAKV,EAAOY,MAAMR,EAAMD,GAClCC,EAAOJ,EAAOW,QAAQT,EAAOC,GAASE,GACtCI,EAAYC,KAAOV,EAAOY,MAAMT,EAAOC,GACvCA,GAAQG,EAGV,OADAC,EAAUE,GAAKV,EAAOY,MAAMR,GACrB,CAACI,EAAWC,cAGrB,SAAkBI,EAAUC,GAI1B,IAHA,IAAId,EAAS,GACTQ,EAAYK,EAAS,GACrBJ,EAAcI,EAAS,GAClBH,EAAI,EAAGJ,EAASG,EAAYH,OAAQI,EAAIJ,GAC/CN,GAAUQ,EAAUE,GACpBV,GAAUc,EAAKL,EAAYC,MAE7B,OAAOV,EAASQ,EAAUE,aAG5B,SAAiBV,EAAQc,EAAMb,EAAMC,GAMnC,IALA,IAGIC,EACAC,EAJAC,EAAaJ,EAAKK,OAClBC,EAAcL,EAAMI,OACpBS,EAAS,IAGkC,GAAvCZ,EAAQH,EAAOW,QAAQV,EAAMG,KACnCW,GAAUf,EAAOY,MAAMR,EAAMD,GAC7BC,EAAOJ,EAAOW,QAAQT,EAAOC,GAASE,GACtCU,GAAUD,EAAKd,EAAOY,MAAMT,EAAOC,IACnCA,GAAQG,EAEV,OAAOQ,EAASf,EAAOY,MAAMR","sourcesContent":["\nfunction parse (source, open, close) {\n  var openLength = open.length\n  var closeLength = close.length\n  var fragments = []\n  var expressions = []\n  var first\n  var last\n  for (var i = 0; (first = source.indexOf(open, last)) > -1;) {\n    fragments[i] = source.slice(last, first)\n    last = source.indexOf(close, first += openLength)\n    expressions[i++] = source.slice(first, last)\n    last += closeLength\n  }\n  fragments[i] = source.slice(last)\n  return [fragments, expressions]\n}\n\nfunction compile (template, data) {\n  var source = ''\n  var fragments = template[0]\n  var expressions = template[1]\n  for (var i = 0, length = expressions.length; i < length;) {\n    source += fragments[i]\n    source += data[expressions[i++]]\n  }\n  return source + fragments[i]\n}\n\nfunction render (source, data, open, close) {\n  var openLength = open.length\n  var closeLength = close.length\n  var result = ''\n  var first\n  var last\n  for (; (first = source.indexOf(open, last)) > -1;) {\n    result += source.slice(last, first)\n    last = source.indexOf(close, first += openLength)\n    result += data[source.slice(first, last)]\n    last += closeLength\n  }\n  return result + source.slice(last)\n}\n\nexport { parse, compile, render }\n"]}